This guide explains how to run the user management stack with Docker and how to update endpoints.

1. **Backend containers**
   - Navigate to `TrinityBackendDjango`.
   - Copy `.env.example` to `.env` and adjust database credentials if required.
   - Set `FRONTEND_URL` in `.env` to the origin of the React app (defaults to `http://localhost:8080`).
     This value is used by Django to send the correct `Access-Control-Allow-Origin` header.
   - Set `PRIMARY_DOMAIN` to the hostname you'll use in the browser (usually `localhost`).
     The setup script also adds `127.0.0.1` as an alias.
     If you change this value, rerun `python create_tenant.py` so the Domains table updates.
   - Run `docker compose up --build` to start Postgres, Mongo, Redis and the Django web service.
   - On first run, initialise the database and tenant schema by running
      `docker compose exec web python create_tenant.py`.
      This applies migrations for the public schema and creates an example tenant.
      The script now passes `--schema` to `migrate_schemas` so tenant migrations
      run without the "No installed app" error.
     **Do not run `python manage.py migrate` directly before this step.**
     If you see an error about `no schema has been selected`, confirm your
     database credentials in `.env` match the `postgres` service in
     `docker-compose.yml` and that the container is running.
   - After the script completes, create an admin account with
     `docker compose exec web python manage.py createsuperuser`.
   - The backend API will be available at `http://localhost:8000/`.

2. **Frontend**
   - Inside `TrinityFrontend`, copy `.env.example` to `.env` if you wish to override the API host.
   - Install dependencies with `npm install` then run `npm start` (Vite dev server on port 8080).
   - The React app proxies API requests to the URL defined in `VITE_ACCOUNTS_API`.

3. **Endpoints**
   - User related API routes live in `TrinityBackendDjango/apps/accounts/urls.py`.
   - Login: `POST /api/accounts/login/`
   - Logout: `POST /api/accounts/logout/`
   - Current user: `GET /api/accounts/users/me/`
   - CRUD users: `/api/accounts/users/`

4. **Updating the API base URL**
   - The base URL is controlled via `VITE_ACCOUNTS_API` in the frontend `.env` file.
   - Both `AuthContext` and the Users page read this environment variable.

5. **Testing the flow**
   - Start the backend with Docker and ensure migrations run (e.g. `docker compose exec web python manage.py migrate`).
   - Create a superuser with `docker compose exec web python manage.py createsuperuser`.
   - The tenant setup script also creates a demo account `harsha/harsha` for quick testing.
   - Access `http://localhost:8080/login` in the browser and log in with the created credentials or the demo account.
   - Navigate to the Users page via the header icon to view and create users.
   - Use the logout button in the header to end the session.

6. **Troubleshooting login**
   - Ensure `docker compose ps` shows the `web` service running on port 8000.
   - Verify the admin user exists by running `docker compose exec web python manage.py shell -c "from django.contrib.auth import get_user_model; print(get_user_model().objects.all())"`.
   - If login fails with "Invalid credentials", recreate the superuser: `docker compose exec web python manage.py createsuperuser`.
   - Confirm the frontend `.env` sets `VITE_ACCOUNTS_API=http://localhost:8000/api/accounts` and restart `npm start`.
   - For CORS errors, ensure the backend `.env` sets `FRONTEND_URL=http://localhost:8080` (or your custom host) and restart the `web` container.
   - Ensure `PRIMARY_DOMAIN` in `.env` matches the hostname you use (e.g. `localhost`).
     If you update this value, rerun `python create_tenant.py` so the new domain is registered.
   - Confirm the `django-cors-headers` package is installed and restart the `web` container.
   - Check browser dev tools Console/Network tabs for `login/` requests.
   - Enable backend logs with `docker compose logs -f web` to inspect authentication errors.
   - On Windows, use `curl.exe` instead of `curl` when testing endpoints in PowerShell.
   - Run `curl -i http://localhost:8000/api/accounts/login/` and expect a `405` response, which shows the route exists.
   - Run `./backend_check.sh` to verify the backend port is reachable and the login endpoint responds.
