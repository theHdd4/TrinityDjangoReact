This guide explains how to run the user management stack with Docker and how to update endpoints.

1. **Backend containers**
   - Navigate to `TrinityBackendDjango`.
   - Copy `.env.example` to `.env` and adjust database credentials if required.
   - Run `docker compose up --build` to start Postgres, Mongo, Redis and the Django web service.
   - On first run, initialise the database and tenant schema by running
     `docker compose exec web python create_tenant.py`.
     This applies migrations for the public schema and creates an example tenant.
     **Do not run `python manage.py migrate` directly before this step.**
     If you see an error about `no schema has been selected`, confirm your
     database credentials in `.env` match the `postgres` service in
     `docker-compose.yml` and that the container is running.
   - After the script completes, create an admin account with
     `docker compose exec web python manage.py createsuperuser`.
   - The backend API will be available at `http://localhost:8000/`.

2. **Frontend**
   - Inside `TrinityFrontend`, copy `.env.example` to `.env` if you wish to override the API host.
   - Install dependencies with `npm install` then run `npm start` (Vite dev server on port 8080).
   - The React app proxies API requests to the URL defined in `VITE_ACCOUNTS_API`.

3. **Endpoints**
   - User related API routes live in `TrinityBackendDjango/apps/accounts/urls.py`.
   - Login: `POST /api/accounts/login/`
   - Logout: `POST /api/accounts/logout/`
   - Current user: `GET /api/accounts/users/me/`
   - CRUD users: `/api/accounts/users/`

4. **Updating the API base URL**
   - The base URL is controlled via `VITE_ACCOUNTS_API` in the frontend `.env` file.
   - Both `AuthContext` and the Users page read this environment variable.

5. **Testing the flow**
   - Start the backend with Docker and ensure migrations run (e.g. `docker compose exec web python manage.py migrate`).
   - Create a superuser with `docker compose exec web python manage.py createsuperuser`.
   - Access `http://localhost:8080/login` in the browser and log in with the created credentials.
   - Navigate to the Users page via the header icon to view and create users.
   - Use the logout button in the header to end the session.
