This guide explains how to run the user management stack with Docker and how to update endpoints.

1. **Backend containers**
   - Navigate to `TrinityBackendDjango`.
   - Copy `.env.example` to `.env` and adjust database credentials if required.
   - Run `docker compose up --build` to start Postgres, Mongo, Redis and the Django web service.
   - The backend API will be available at `http://localhost:8000/`.

2. **Frontend**
   - Inside `TrinityFrontend`, install dependencies with `npm install` then run `npm start`.
   - The React app proxies API requests to `localhost:8000` so both stacks must run concurrently.

3. **Endpoints**
   - User related API routes live in `TrinityBackendDjango/apps/accounts/urls.py`.
   - Login: `POST /api/accounts/login/`
   - Logout: `POST /api/accounts/logout/`
   - Current user: `GET /api/accounts/users/me/`
   - CRUD users: `/api/accounts/users/`

4. **Updating the API base URL**
   - Frontend requests use `http://localhost:8000/api/accounts` defined in `src/contexts/AuthContext.tsx` and `src/pages/Users.tsx`.
   - Change this value if the backend runs on a different host or port.

5. **Testing the flow**
   - Start the backend with Docker and ensure migrations run (e.g. `docker compose exec web python manage.py migrate`).
   - Create a superuser with `docker compose exec web python manage.py createsuperuser`.
   - Access `http://localhost:3000/login` in the browser and log in with the created credentials.
   - Navigate to the Users page via the header icon to view and create users.
   - Use the logout button in the header to end the session.
